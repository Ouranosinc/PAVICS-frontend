{"version":3,"sources":["../../src/actions/index.js"],"names":["SUPPORTED_FETCH_OPTS","SUPPORTED_REDUCE_OPTS","getActionName","actionId","resourceName","resourcePluralName","isArray","createAction","scope","actionOpts","type","context","contextOpts","dispatch","getState","reduceOpts","isPure","status","options","Promise","resolve","fetchOpts","resolvedfetchOpts","Object","keys","reduce","soFar","key","url","eligibleFetchOptions","urlParams","finalFetchUrl","finalFetchOpts","successShowSomething","translatedVerb","translatedResourceName","then","transformResponse","success","receivedAt","Date","now","payload","catch","err","error","statusCode","body","message","code","createActions","actions","globalOpts","actionKeys","actionFuncs","substr","actionName"],"mappings":"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","file":"index.js","sourcesContent":["// @inspiration https://github.com/angular/angular.js/blob/master/src/ngResource/resource.js\n\nimport {getActionType, getTypesScope, scopeType} from './../types';\nimport {applyTransformPipeline, buildTransformPipeline} from './transform';\nimport {parseUrlParams} from './../helpers/url';\nimport fetch, {buildFetchUrl, buildFetchOpts} from './../helpers/fetch';\nimport {isFunction, isString, pick, ucfirst, getPluralName} from './../helpers/util';\nimport { NotificationManager } from 'react-notifications';\nimport {defaultTransformResponsePipeline} from './../defaults';\n\nconst SUPPORTED_FETCH_OPTS = ['url', 'method', 'headers', 'credentials', 'query', 'body'];\nconst SUPPORTED_REDUCE_OPTS = ['assignResponse', 'isArray', 'isPure'];\n\nconst getActionName = (actionId, {resourceName, resourcePluralName = getPluralName(resourceName), isArray = false} = {}) => (\n  !resourceName\n    ? actionId\n    : `${actionId}${ucfirst(isArray ? resourcePluralName : resourceName)}`\n);\n\nconst createAction = (actionId, {resourceName, resourcePluralName = getPluralName(resourceName), scope, ...actionOpts}) => {\n  const type = scopeType(getActionType(actionId), scope);\n  // Actual action function with two args\n  // Context usage changes with resolved method:\n  // - GET/DELETE will be used to resolve query params (eg. /users/:id)\n  // - POST/PATCH will be used to resolve query params (eg. /users/:id) and as request body\n  return (context, contextOpts = {}) => (dispatch, getState) => {\n    // Prepare reduce options\n    const reduceOpts = {\n      ...pick(actionOpts, ...SUPPORTED_REDUCE_OPTS),\n      ...pick(contextOpts, ...SUPPORTED_REDUCE_OPTS)\n    };\n    // Support pure actions\n    if (actionOpts.isPure) {\n      dispatch({type, status: 'resolved', options: reduceOpts, context});\n      return Promise.resolve();\n    }\n    // First dispatch a pending action\n    dispatch({type, status: 'pending', context});\n    // Prepare fetch options\n    const fetchOpts = {\n      ...pick(actionOpts, ...SUPPORTED_FETCH_OPTS),\n      ...pick(contextOpts, ...SUPPORTED_FETCH_OPTS)\n    };\n    // Support dynamic fetch options\n    const resolvedfetchOpts = Object.keys(fetchOpts).reduce((soFar, key) => {\n      soFar[key] = isFunction(fetchOpts[key]) ? fetchOpts[key](getState, {actionId}) : fetchOpts[key];\n      return soFar;\n    }, {});\n    const {url, ...eligibleFetchOptions} = resolvedfetchOpts;\n    // Build fetch url and options\n    const urlParams = parseUrlParams(url);\n    const finalFetchUrl = buildFetchUrl(context, {url, urlParams});\n    const finalFetchOpts = buildFetchOpts(context, eligibleFetchOptions);\n\n    // PAV-451, figured out what verb to be used and if we gotta show something\n    let successShowSomething = false;\n    let translatedVerb = '';\n    let translatedResourceName = resourceName;\n    switch (getActionType(actionId)){\n      case 'CREATE':\n        successShowSomething = true;\n        translatedVerb = 'created';\n        break;\n      case 'UPDATE':\n        successShowSomething = true;\n        translatedVerb = 'updated';\n        break;\n      case 'DELETE':\n        successShowSomething = true;\n        translatedVerb = 'deleted';\n        break;\n      case 'FETCH':\n      case 'GET':\n        translatedVerb = '';\n        successShowSomething = false;\n        break;\n      default:\n        break;\n    }\n\n    switch(resourceName){\n      case 'projectResearchs':\n        if(getActionType(actionId) === 'CREATE') translatedVerb = 'linked to project';\n      case 'research':\n        translatedResourceName = \"Search criteria(s)\";\n        break;\n      case 'projectDatasets':\n        if(getActionType(actionId) === 'CREATE') translatedVerb = 'linked to project';\n      case 'dataset':\n        translatedResourceName = \"Dataset\";\n        break;\n      case 'project':\n        translatedResourceName = \"Project\";\n        break;\n      case 'workflow':\n        translatedResourceName = \"Workflow\";\n        break;\n      case 'researcher':\n        translatedResourceName = \"User\";\n        break;\n      case 'job':\n        if(getActionType(actionId) === 'CREATE') translatedVerb = 'linked to project';\n        translatedResourceName = \"Launched job\";\n        break;\n    }\n\n    return fetch(finalFetchUrl, finalFetchOpts)\n      .then(applyTransformPipeline(buildTransformPipeline(defaultTransformResponsePipeline, actionOpts.transformResponse)))\n      .then(payload => {\n        if(successShowSomething) {\n          NotificationManager.success(`${translatedResourceName} was ${translatedVerb} with success`, 'Success', 4000);\n        }\n        dispatch({type, status: 'resolved', context, options: reduceOpts, receivedAt: Date.now(), ...payload});\n      })\n      .catch((err) => {\n        // Catch HttpErrors\n        NotificationManager.error(`${translatedResourceName} failed at being ${translatedVerb}: Error ${err.statusCode} ${err.body.error.message}`, 'Error', 10000);\n        if (err.statusCode) {\n          dispatch({\n            type,\n            status: 'rejected',\n            code: err.statusCode,\n            body: err.body,\n            context,\n            options: reduceOpts,\n            receivedAt: Date.now()\n          });\n        // Catch regular Errors\n        } else {\n          dispatch({\n            type,\n            status: 'rejected',\n            err,\n            context,\n            options: reduceOpts,\n            receivedAt: Date.now()\n          });\n        }\n        throw err;\n      });\n  };\n};\n\nconst createActions = (\n  actions = {},\n  {\n    resourceName,\n    resourcePluralName = getPluralName(resourceName),\n    scope = getTypesScope(resourceName),\n    ...globalOpts\n  } = {}\n) => {\n  const actionKeys = Object.keys(actions);\n  return actionKeys.reduce((actionFuncs, actionId) => {\n    // Add support for relative url override\n    const {url} = actions[actionId];\n    if (globalOpts.url && url && isString(url) && url.substr(0, 1) === '.') {\n      actions[actionId] = {...actions[actionId], url: `${globalOpts.url}${url.substr(1)}`};\n    }\n    const actionOpts = {...globalOpts, ...actions[actionId]};\n    const actionName = getActionName(actionId, {resourceName, resourcePluralName, isArray: actionOpts.isArray});\n    actionFuncs[actionName] = createAction(actionId, {resourceName, resourcePluralName, scope, ...actionOpts});\n    return actionFuncs;\n  }, {});\n};\n\nexport {getActionName, createActions};\n"]}