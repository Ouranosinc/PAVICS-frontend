{"version":3,"sources":["../src/types.js"],"names":["scopeType","type","scope","scopeTypes","types","getTypesScope","resourceName","getActionTypeKey","actionId","resourcePluralName","isArray","toUpperCase","getActionType","createType","typeKey","createTypes","actions","rawTypes","Object","keys","reduce","actionOpts","assign"],"mappings":";;;;;;;AAAA;;;;AAEA,IAAMA,YAAY,SAAZA,SAAY,CAACC,IAAD,EAAOC,KAAP;AAAA,SAAkBA,QAAWA,KAAX,SAAoBD,IAApB,GAA6BA,IAA/C;AAAA,CAAlB;;AAEA,IAAME,aAAa,SAAbA,UAAa;AAAA,MAACC,KAAD,uEAAS,EAAT;AAAA,MAAaF,KAAb;AAAA,SAAwBA,QAAQ,qBAAUE,KAAV,EAAiB;AAAA,WAAQJ,UAAUC,IAAV,EAAgBC,KAAhB,CAAR;AAAA,GAAjB,CAAR,GAA2DE,KAAnF;AAAA,CAAnB;;AAEA,IAAMC,gBAAgB,SAAhBA,aAAgB;AAAA,SACpBC,+BACkB,0BAAeA,YAAf,CADlB,GAEI,EAHgB;AAAA,CAAtB;;AAMA,IAAMC,mBAAmB,SAAnBA,gBAAmB,CAACC,QAAD;AAAA,iFAA+F,EAA/F;AAAA,MAAYF,YAAZ,QAAYA,YAAZ;AAAA,mCAA0BG,kBAA1B;AAAA,MAA0BA,kBAA1B,yCAA+C,yBAAcH,YAAd,CAA/C;AAAA,0BAA4EI,OAA5E;AAAA,MAA4EA,OAA5E,gCAAsF,KAAtF;;AAAA,SACvBJ,eACOE,SAASG,WAAT,EADP,SACiC,0BAAeD,UAAUD,kBAAV,GAA+BH,YAA9C,CADjC,GAEI,0BAAeE,QAAf,CAHmB;AAAA,CAAzB;;AAMA,IAAMI,gBAAgB,SAAhBA,aAAgB;AAAA,SACpB,0BAAeJ,QAAf,CADoB;AAAA,CAAtB;;AAIA,IAAMK,aAAa,SAAbA,UAAa,CAACL,QAAD,SAAmE;AAAA,MAAvDF,YAAuD,SAAvDA,YAAuD;AAAA,MAAzCG,kBAAyC,SAAzCA,kBAAyC;AAAA,4BAArBC,OAAqB;AAAA,MAArBA,OAAqB,iCAAX,KAAW;;AACpF,MAAMI,UAAUP,iBAAiBC,QAAjB,EAA2B,EAACF,0BAAD,EAAeG,sCAAf,EAAmCC,gBAAnC,EAA3B,CAAhB;AACA,6BAASI,OAAT,EAAmBF,cAAcJ,QAAd,CAAnB;AACD,CAHD;;AAKA,IAAMO,cAAc,SAAdA,WAAc,GAAgG;AAAA,MAA/FC,OAA+F,uEAArF,EAAqF;;AAAA,kFAAP,EAAO;AAAA,MAAhFV,YAAgF,SAAhFA,YAAgF;AAAA,MAAlEG,kBAAkE,SAAlEA,kBAAkE;AAAA,0BAA9CP,KAA8C;AAAA,MAA9CA,KAA8C,+BAAtCG,cAAcC,YAAd,CAAsC;;AAClH,MAAMW,WAAWC,OAAOC,IAAP,CAAYH,OAAZ,EAAqBI,MAArB,CAA4B,UAAChB,KAAD,EAAQI,QAAR,EAAqB;AAChE,QAAMa,aAAaL,QAAQR,QAAR,CAAnB;AACA,WAAOU,OAAOI,MAAP,CAAclB,KAAd,EAAqBS,WAAWL,QAAX,EAAqB,EAACF,0BAAD,EAAeG,sCAAf,EAAmCC,SAASW,WAAWX,OAAvD,EAArB,CAArB,CAAP;AACD,GAHgB,EAGd,EAHc,CAAjB;AAIA,SAAOP,WAAWc,QAAX,EAAqBf,KAArB,CAAP;AACD,CAND;;QAQQF,S,GAAAA,S;QAAWK,a,GAAAA,a;QAAeQ,U,GAAAA,U;QAAYE,W,GAAAA,W;QAAaH,a,GAAAA,a;QAAeL,gB,GAAAA,gB","file":"types.js","sourcesContent":["import {mapObject, getPluralName, upperSnakeCase} from './helpers/util';\n\nconst scopeType = (type, scope) => (scope ? `${scope}/${type}` : type);\n\nconst scopeTypes = (types = {}, scope) => (scope ? mapObject(types, type => scopeType(type, scope)) : types);\n\nconst getTypesScope = resourceName => (\n  resourceName\n    ? `@@resource/${upperSnakeCase(resourceName)}`\n    : ''\n);\n\nconst getActionTypeKey = (actionId, {resourceName, resourcePluralName = getPluralName(resourceName), isArray = false} = {}) => (\n  resourceName\n    ? `${actionId.toUpperCase()}_${upperSnakeCase(isArray ? resourcePluralName : resourceName)}`\n    : upperSnakeCase(actionId)\n);\n\nconst getActionType = actionId => (\n  upperSnakeCase(actionId)\n);\n\nconst createType = (actionId, {resourceName, resourcePluralName, isArray = false}) => {\n  const typeKey = getActionTypeKey(actionId, {resourceName, resourcePluralName, isArray});\n  return {[typeKey]: getActionType(actionId)};\n};\n\nconst createTypes = (actions = {}, {resourceName, resourcePluralName, scope = getTypesScope(resourceName)} = {}) => {\n  const rawTypes = Object.keys(actions).reduce((types, actionId) => {\n    const actionOpts = actions[actionId];\n    return Object.assign(types, createType(actionId, {resourceName, resourcePluralName, isArray: actionOpts.isArray}));\n  }, {});\n  return scopeTypes(rawTypes, scope);\n};\n\nexport {scopeType, getTypesScope, createType, createTypes, getActionType, getActionTypeKey};\n"]}