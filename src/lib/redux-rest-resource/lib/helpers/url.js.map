{"version":3,"sources":["../../src/helpers/url.js"],"names":["PROTOCOL_AND_DOMAIN_REGEX","NUMBER_REGEX","encodeUriQuery","val","pctEncodeSpaces","encodeURIComponent","replace","encodeUriSegment","parseUrlParams","url","split","reduce","urlParams","param","test","RegExp","isQueryParamValue","replaceUrlParamFromUrl","urlParam","match","leadingSlashes","tail","charAt","replaceQueryStringParamFromUrl","key","value","re","sep","indexOf","splitUrlByProtocolAndDomain","protocolAndDomain","remainderUrl"],"mappings":";;;;;AAAA;;AAEA,IAAMA,4BAA4B,mBAAlC;AACA,IAAMC,eAAe,UAArB;;AAEA;;;;;AAKO,IAAMC,0CAAiB,SAAjBA,cAAiB,CAACC,GAAD,EAAMC,eAAN;AAAA,SAC5BC,mBAAmBF,GAAnB,EACGG,OADH,CACW,OADX,EACoB,GADpB,EAEGA,OAFH,CAEW,OAFX,EAEoB,GAFpB,EAGGA,OAHH,CAGW,MAHX,EAGmB,GAHnB,EAIGA,OAJH,CAIW,OAJX,EAIoB,GAJpB,EAKGA,OALH,CAKW,MALX,EAKoBF,kBAAkB,KAAlB,GAA0B,GAL9C,CAD4B;AAAA,CAAvB;;AAQP;;;;;AAKO,IAAMG,8CAAmB,SAAnBA,gBAAmB;AAAA,SAC9BL,eAAeC,GAAf,EAAoB,IAApB,EACGG,OADH,CACW,OADX,EACoB,GADpB,EAEGA,OAFH,CAEW,OAFX,EAEoB,GAFpB,EAGGA,OAHH,CAGW,OAHX,EAGoB,GAHpB,CAD8B;AAAA,CAAzB;;AAMA,IAAME,0CAAiB,SAAjBA,cAAiB;AAAA,SAC5BC,IAAIC,KAAJ,CAAU,IAAV,EAAgBC,MAAhB,CAAuB,UAACC,SAAD,EAAYC,KAAZ,EAAsB;AAC3C,QAAI,CAACZ,aAAaa,IAAb,CAAkBD,KAAlB,CAAD,IAA6BA,KAA7B,IAAuC,IAAIE,MAAJ,kBAA0BF,KAA1B,cAA0CC,IAA1C,CAA+CL,GAA/C,CAA3C,EAAiG;AAC/FG,gBAAUC,KAAV,IAAmB,EAAE;AACnBG,2BAAoB,IAAID,MAAJ,aAAqBF,KAArB,eAAD,CAAyCC,IAAzC,CAA8CL,GAA9C;AADF,OAAnB;AAGD;AACD,WAAOG,SAAP;AACD,GAPD,EAOG,EAPH,CAD4B;AAAA,CAAvB;;AAUA,IAAMK,0DAAyB,SAAzBA,sBAAyB,CAACR,GAAD,EAAMS,QAAN;AAAA,MAAgBZ,OAAhB,uEAA0B,EAA1B;AAAA,SACpCG,IAAIH,OAAJ,CAAY,IAAIS,MAAJ,WAAmBG,QAAnB,cAAsC,GAAtC,CAAZ,EAAwD,UAACC,KAAD,EAAQC,cAAR,EAAwBC,IAAxB;AAAA,WACtD,CAACf,WAAWe,KAAKC,MAAL,CAAY,CAAZ,MAAmB,GAA9B,GAAoCF,cAApC,GAAqD,EAAtD,IAA4Dd,OAA5D,GAAsEe,IADhB;AAAA,GAAxD,CADoC;AAAA,CAA/B;;AAIA,IAAME,0EAAiC,SAAjCA,8BAAiC,CAACd,GAAD,EAAMe,GAAN,EAAWC,KAAX,EAAqB;AACjE,MAAMC,KAAK,IAAIX,MAAJ,YAAoBS,GAApB,gBAAoC,GAApC,CAAX;AACA,MAAMG,MAAMlB,IAAImB,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAAtB,GAA0B,GAA1B,GAAgC,GAA5C;AACA,SAAOnB,IAAIU,KAAJ,CAAUO,EAAV,IACHjB,IAAIH,OAAJ,CAAYoB,EAAZ,SAAqBF,GAArB,SAA4BC,KAA5B,QADG,QAEAhB,GAFA,GAEMkB,GAFN,GAEYH,GAFZ,SAEmBC,KAF1B;AAGD,CANM;;AAQA,IAAMI,oEAA8B,SAA9BA,2BAA8B,CAACpB,GAAD,EAAS;AAClD,MAAIqB,0BAAJ;AACA,MAAMC,eAAetB,IAAIH,OAAJ,CAAYN,yBAAZ,EAAuC,UAACmB,KAAD,EAAW;AACrEW,wBAAoBX,KAApB;AACA,WAAO,EAAP;AACD,GAHoB,CAArB;AAIA,SAAO,CAACW,iBAAD,EAAoBC,YAApB,CAAP;AACD,CAPM","file":"url.js","sourcesContent":["// https://github.com/angular/angular.js/blob/master/src/ngResource/resource.js#L473\n\nconst PROTOCOL_AND_DOMAIN_REGEX = /^https?:\\/\\/[^/]*/;\nconst NUMBER_REGEX = /^[0-9]+$/;\n\n/**\n * This method is intended for encoding *key* or *value* parts of query component. We need a\n * custom method because encodeURIComponent is too aggressive and encodes stuff that doesn't\n * have to be encoded per http://tools.ietf.org/html/rfc3986\n */\nexport const encodeUriQuery = (val, pctEncodeSpaces) =>\n  encodeURIComponent(val)\n    .replace(/%40/gi, '@')\n    .replace(/%3A/gi, ':')\n    .replace(/%24/g, '$')\n    .replace(/%2C/gi, ',')\n    .replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));\n\n/**\n * We need our custom method because encodeURIComponent is too aggressive and doesn't follow\n * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set\n * (pchar) allowed in path segments\n */\nexport const encodeUriSegment = val =>\n  encodeUriQuery(val, true)\n    .replace(/%26/gi, '&')\n    .replace(/%3D/gi, '=')\n    .replace(/%2B/gi, '+');\n\nexport const parseUrlParams = url =>\n  url.split(/\\W/).reduce((urlParams, param) => {\n    if (!NUMBER_REGEX.test(param) && param && (new RegExp(`(^|[^\\\\\\\\]):${param}(\\\\W|$)`).test(url))) {\n      urlParams[param] = { // eslint-disable-line no-param-reassign\n        isQueryParamValue: (new RegExp(`\\\\?.*=:${param}(?:\\\\W|$)`)).test(url)\n      };\n    }\n    return urlParams;\n  }, {});\n\nexport const replaceUrlParamFromUrl = (url, urlParam, replace = '') =>\n  url.replace(new RegExp(`(/?):${urlParam}(\\\\W|$)`, 'g'), (match, leadingSlashes, tail) =>\n    (replace || tail.charAt(0) === '/' ? leadingSlashes : '') + replace + tail);\n\nexport const replaceQueryStringParamFromUrl = (url, key, value) => {\n  const re = new RegExp(`([?&])${key}=.*?(&|$)`, 'i');\n  const sep = url.indexOf('?') !== -1 ? '&' : '?';\n  return url.match(re)\n    ? url.replace(re, `$1${key}=${value}$2`)\n    : `${url}${sep}${key}=${value}`;\n};\n\nexport const splitUrlByProtocolAndDomain = (url) => {\n  let protocolAndDomain;\n  const remainderUrl = url.replace(PROTOCOL_AND_DOMAIN_REGEX, (match) => {\n    protocolAndDomain = match;\n    return '';\n  });\n  return [protocolAndDomain, remainderUrl];\n};\n"]}