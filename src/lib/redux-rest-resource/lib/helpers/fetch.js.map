{"version":3,"sources":["../../src/helpers/fetch.js"],"names":["HttpError","statusCode","body","message","name","constructor","Error","captureStackTrace","stack","status","buildFetchUrl","context","url","urlParams","stripTrailingSlashes","protocolAndDomain","remainderUrl","builtUrl","Object","keys","reduce","wipUrl","urlParam","urlParamInfo","contextAsObject","id","value","encodedValue","isQueryParamValue","replace","buildFetchOpts","method","headers","credentials","query","opts","hasBody","test","JSON","stringify","fetch","options","queryParam","queryParamValue","Promise","resolve","then","res","ok","contentType","get","isJson"],"mappings":"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","file":"fetch.js","sourcesContent":["import {isObject, isString, startsWith} from './util';\nimport {\n  encodeUriQuery,\n  encodeUriSegment,\n  replaceUrlParamFromUrl,\n  replaceQueryStringParamFromUrl,\n  splitUrlByProtocolAndDomain\n} from './url';\nimport {defaultGlobals, defaultHeaders} from './../defaults';\n\nexport class HttpError extends Error {\n  constructor(statusCode = 500, {body, message = 'HttpError'}) {\n    super(message);\n    this.name = this.constructor.name;\n    this.message = message;\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      this.stack = (new Error(message)).stack;\n    }\n    // Http\n    this.statusCode = statusCode;\n    this.status = statusCode;\n    this.body = body;\n  }\n}\n\nexport const buildFetchUrl = (context, {url, urlParams, stripTrailingSlashes = true}) => {\n  const [protocolAndDomain, remainderUrl] = splitUrlByProtocolAndDomain(url);\n  // Replace urlParams with values from context\n  let builtUrl = Object.keys(urlParams).reduce((wipUrl, urlParam) => {\n    const urlParamInfo = urlParams[urlParam];\n    const contextAsObject = !isObject(context) ? {id: context} : context;\n    const value = contextAsObject[urlParam] || ''; // self.defaults[urlParam];\n    if (value) {\n      const encodedValue = urlParamInfo.isQueryParamValue ? encodeUriQuery(value, true) : encodeUriSegment(value);\n      return replaceUrlParamFromUrl(wipUrl, urlParam, encodedValue);\n    }\n    return replaceUrlParamFromUrl(wipUrl, urlParam);\n  }, remainderUrl);\n  // Strip trailing slashes and set the url (unless this behavior is specifically disabled)\n  if (stripTrailingSlashes) {\n    builtUrl = builtUrl.replace(/\\/+$/, '') || '/';\n  }\n  return protocolAndDomain + builtUrl;\n};\n\nexport const buildFetchOpts = (context, {method, headers, credentials, query, body}) => {\n  const opts = {\n    headers: defaultHeaders\n  };\n  if (method) {\n    opts.method = method;\n  }\n  if (headers) {\n    opts.headers = {...opts.headers, ...headers};\n  }\n  if (credentials) {\n    opts.credentials = credentials;\n  }\n  if (query) {\n    opts.query = query;\n  }\n  const hasBody = /^(POST|PUT|PATCH)$/i.test(opts.method);\n  if (hasBody) {\n    if (body) {\n      opts.body = isString(body) ? body : JSON.stringify(body);\n    } else if (context) {\n      opts.body = isString(context) ? context : JSON.stringify(context);\n    }\n  }\n  return opts;\n};\n\nconst fetch = (url, options = {}) => {\n  // Support options.query\n  const builtUrl = Object.keys(options.query || []).reduce((wipUrl, queryParam) => {\n    const queryParamValue = isString(options.query[queryParam]) ? options.query[queryParam] : JSON.stringify(options.query[queryParam]);\n    return replaceQueryStringParamFromUrl(wipUrl, queryParam, queryParamValue);\n  }, url);\n  return (options.Promise || defaultGlobals.Promise).resolve((defaultGlobals.fetch || fetch)(builtUrl, options))\n    .then((res) => {\n      if (!res.ok) {\n        const contentType = res.headers.get('Content-Type');\n        const isJson = startsWith(contentType, 'application/json');\n        return res[isJson ? 'json' : 'text']().then((body) => {\n          throw new HttpError(res.status, {body});\n        });\n      }\n      return res;\n    });\n};\n\nexport default fetch;\n"]}