{"version":3,"sources":["../../src/reducers/index.js"],"names":["defaultReducers","create","state","action","status","isCreating","items","body","fetch","isFetching","didInvalidate","lastUpdated","receivedAt","get","isFetchingItem","didInvalidateItem","actionOpts","options","item","update","assignResponse","updatedItems","listItemIndex","findIndex","el","id","splice","slice","lastUpdatedItem","isUpdating","context","updatedItem","delete","isDeleting","filter","createReducer","actionId","resourceName","resourcePluralName","reduce","isPure","Error","gerundName","gerundStateKey","createReducers","actions","globalOpts","actionKeys","Object","keys","actionReducers","reducerKey","toLowerCase","createRootReducer","scope","givenReducers","reducers","scopeNamespace","rootReducer","String","type","startsWith","substr","length","initialState"],"mappings":"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","file":"index.js","sourcesContent":["import {initialState} from './../defaults';\nimport {getTypesScope, getActionType} from './../types';\nimport {getGerundName, isFunction, ucfirst} from './../helpers/util';\n\nconst defaultReducers = {\n  create: (state, action) => {\n    switch (action.status) {\n      case 'pending':\n        // Add object to store as soon as possible?\n        return {...state,\n          isCreating: true\n          // items: [{\n          //   id: state.items.reduce((maxId, obj) => Math.max(obj.id, maxId), -1) + 1,\n          //   ...action.context\n          // }, ...state.items]\n        };\n      case 'resolved':\n        // Assign returned object\n        return {...state,\n          isCreating: false,\n          items: [...(state.items || []), action.body]\n        };\n      case 'rejected':\n        return {...state,\n          isCreating: false\n        };\n      default:\n        return state;\n    }\n  },\n  fetch: (state, action) => {\n    switch (action.status) {\n      case 'pending':\n        return {...state,\n          isFetching: true,\n          didInvalidate: false\n        };\n      case 'resolved':\n        return {...state,\n          isFetching: false,\n          didInvalidate: false,\n          items: action.body,\n          lastUpdated: action.receivedAt\n        };\n      case 'rejected':\n        return {...state,\n          isFetching: false,\n          didInvalidate: false\n        };\n      default:\n        return state;\n    }\n  },\n  get: (state, action) => {\n    switch (action.status) {\n      case 'pending':\n        return {...state,\n          isFetchingItem: true,\n          didInvalidateItem: false\n        };\n      case 'resolved': {\n        const actionOpts = action.options || {};\n        const item = action.body;\n        const update = {};\n        if (actionOpts.assignResponse) {\n          const updatedItems = state.items;\n          const listItemIndex = updatedItems.findIndex(el => el.id === item.id);\n          if (listItemIndex !== -1) {\n            updatedItems.splice(listItemIndex, 1, item);\n            update.items = updatedItems.slice();\n          }\n        }\n        return {...state,\n          isFetchingItem: false,\n          didInvalidateItem: false,\n          lastUpdatedItem: action.receivedAt,\n          item,\n          ...update\n        };\n      }\n      case 'rejected':\n        return {...state,\n          isFetchingItem: false,\n          didInvalidateItem: false\n        };\n      default:\n        return state;\n    }\n  },\n  update: (state, action) => {\n    switch (action.status) {\n      case 'pending':\n        // Update object in store as soon as possible?\n        return {...state,\n          isUpdating: true\n        };\n      case 'resolved': {\n        // Assign context or returned object\n        const id = action.context.id || action.context;\n        const actionOpts = action.options || {};\n        const update = actionOpts.assignResponse ? action.body : action.context;\n        const listItemIndex = state.items.findIndex(el => el.id === id);\n        const updatedItems = state.items.slice();\n        if (listItemIndex !== -1) {\n          updatedItems[listItemIndex] = {...updatedItems[listItemIndex], ...update};\n        }\n        const updatedItem = state.item && state.item.id === id\n          ? {...state.item, ...update}\n          : state.item;\n        return {...state,\n          isUpdating: false,\n          items: updatedItems,\n          item: updatedItem\n        };\n      }\n      case 'rejected':\n        return {...state,\n          isUpdating: false\n        };\n      default:\n        return state;\n    }\n  },\n  delete: (state, action) => {\n    switch (action.status) {\n      case 'pending':\n        // Update object in store as soon as possible?\n        return {...state,\n          isDeleting: true\n        };\n      case 'resolved': // eslint-disable-line\n        const id = action.context.id || action.context;\n        return {...state,\n          isDeleting: false,\n          items: [...state.items.filter(el => el.id !== id)]\n        };\n      case 'rejected':\n        return {...state,\n          isDeleting: false\n        };\n      default:\n        return state;\n    }\n  }\n};\n\n\nconst createReducer = (actionId, {resourceName, resourcePluralName = `${resourceName}s`, ...actionOpts}) => {\n  // Custom reducers\n  if (actionOpts.reduce && isFunction(actionOpts.reduce)) {\n    return actionOpts.reduce;\n  }\n  // Do require a custom reduce function for pure actions\n  if (actionOpts.isPure) {\n    throw new Error(`Missing \\`reduce\\` option for pure action \\`${actionId}\\``);\n  }\n  // Default reducers\n  if (defaultReducers[actionId]) {\n    return defaultReducers[actionId];\n  }\n  // Custom actions\n  const gerundName = actionOpts.gerundName || getGerundName(actionId);\n  const gerundStateKey = `is${ucfirst(gerundName)}`;\n  return (state, action) => {\n    switch (action.status) {\n      case 'pending':\n        // Update object in store as soon as possible?\n        return {...state,\n          [gerundStateKey]: true\n        };\n      case 'resolved': // eslint-disable-line\n        return {...state,\n          [gerundStateKey]: false\n        };\n      case 'rejected':\n        return {...state,\n          [gerundStateKey]: false\n        };\n      default:\n        return state;\n    }\n  };\n};\n\nconst createReducers = (actions = {}, {resourceName, resourcePluralName, ...globalOpts} = {}) => {\n  const actionKeys = Object.keys(actions);\n  return actionKeys.reduce((actionReducers, actionId) => {\n    const actionOpts = {...globalOpts, ...actions[actionId]};\n    const reducerKey = getActionType(actionId).toLowerCase();\n    actionReducers[reducerKey] = createReducer(actionId, {resourceName, resourcePluralName, ...actionOpts});\n    return actionReducers;\n  }, {});\n};\n\nconst createRootReducer = (\n  actions = {},\n  {\n    resourceName,\n    resourcePluralName,\n    scope = getTypesScope(resourceName),\n    reducers: givenReducers,\n    ...globalOpts\n  } = {}\n) => {\n  const scopeNamespace = scope ? `${scope}/` : '';\n  const reducers = givenReducers || createReducers(actions, {resourceName, resourcePluralName, ...globalOpts});\n  const rootReducer = (state = {...initialState}, action) => {\n    // Only process relevant namespace\n    if (scopeNamespace && !String(action.type).startsWith(scopeNamespace)) {\n      return state;\n    }\n    // Only process relevant action type\n    const type = action.type.substr(scopeNamespace.length).toLowerCase();\n    // Check for a matching reducer\n    if (reducers[type]) {\n      return reducers[type](state, action);\n    }\n    return state;\n  };\n  return rootReducer;\n};\n\nexport {initialState, defaultReducers, createReducers, createRootReducer};\n"]}