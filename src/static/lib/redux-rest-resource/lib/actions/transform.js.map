{"version":3,"sources":["../../src/actions/transform.js"],"names":["buildTransformPipeline","initial","transform","transformResponsePipeline","Array","isArray","applyTransformPipeline","pipeline","reduce","soFar","fn","then","Promise","resolve"],"mappings":";;;;;;;AAAA;;;;AAEA,IAAMA,yBAAyB,SAAzBA,sBAAyB,CAACC,OAAD,EAAUC,SAAV,EAAwB;AACrD,MAAIC,kCAAJ;AACA,MAAID,SAAJ,EAAe;AACbC,gCAA4BC,MAAMC,OAAN,CAAcH,SAAd,IAC1BA,SAD0B,gCAEtBD,OAFsB,IAEbC,SAFa,EAA5B;AAGD,GAJD,MAIO;AACLC,6DAAgCF,OAAhC;AACD;AACD,SAAOE,yBAAP;AACD,CAVD;AAWA,IAAMG,yBAAyB,SAAzBA,sBAAyB,CAACC,QAAD,EAAc;AAAE;AAC7C,SAAO;AAAA,WAAWA,SAASC,MAAT,CAAgB,UAACC,KAAD,EAAQC,EAAR;AAAA,aAAeD,MAAME,IAAN,CAAWD,EAAX,CAAf;AAAA,KAAhB,EAA+C,yBAAeE,OAAf,CAAuBC,OAAvB,CAA+BZ,OAA/B,CAA/C,CAAX;AAAA,GAAP;AACD,CAFD;;QAKED,sB,GAAAA,sB;QACAM,sB,GAAAA,sB","file":"transform.js","sourcesContent":["import {defaultGlobals} from './../defaults';\n\nconst buildTransformPipeline = (initial, transform) => {\n  let transformResponsePipeline;\n  if (transform) {\n    transformResponsePipeline = Array.isArray(transform) ?\n      transform :\n      [...initial, transform];\n  } else {\n    transformResponsePipeline = [...initial];\n  }\n  return transformResponsePipeline;\n};\nconst applyTransformPipeline = (pipeline) => { // eslint-disable-line arrow-body-style\n  return initial => pipeline.reduce((soFar, fn) => soFar.then(fn), defaultGlobals.Promise.resolve(initial));\n};\n\nexport {\n  buildTransformPipeline,\n  applyTransformPipeline\n};\n"]}